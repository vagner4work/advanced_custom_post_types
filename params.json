{"name":"Advanced custom post types","tagline":"Advanced Custom Post Types","body":"Advanced Custom Post Types: v3.1.0\r\n---\r\n\r\nThis is a framework for creating not only custom post types, roles and taxonomies in WordPress but it will also give you the ability to rapidly create custom fields (post types only).\r\n\r\nby Kevin Dees at http://kevindees.cc or on twitter https://twitter.com/kevindees\r\n\r\nNew to WordPress? Use Plugins!\r\n- http://wordpress.org/extend/plugins/advanced-custom-fields/\r\n- http://wordpress.org/extend/plugins/custom-post-type-ui/\r\n\r\nUsage\r\n---\r\n\r\n1) Use a php include to add the file init.php to your plugin or functions.php theme file. For more advanced users look at the code comments for help on what args are available. ACPT also comes with its own plugin system so you don't have to muck up your functions.php file and can import others work with ease.\r\n\r\n```php\r\ninclude('acpt/init.php');\r\n```\r\n\r\n2) Copy and rename sample-config.php to config.php\r\n\r\nFor custom settings see the config.php file. Set DEV_MODE to true for forms API help when theming.\r\n\r\n```php\r\ndefine('DEV_MODE', true);\r\n```\r\n\r\n3) Set `define('ACPT_FOLDER_NAME', 'acpt')` if you are using another folder structure. For example, `define('ACPT_FOLDER_NAME', 'inc/acpt')` if you have acpt in a folder called inc.\r\n\r\nPlugins System\r\n---\r\n\r\nYou do not need to use the plugin system for ACPT to work. However, you will need to disable it in the config file if you don't want it to run.\r\n\r\n```php\r\n// load plugins\r\ndefine('ACPT_LOAD_PLUGINS', true);\r\n```\r\n\r\nBy default the \"sample\" plugin is loaded. ACPT plugins are not the same as WordPress plugins. To load your own ACPT plugins you need to do the following:\r\n\r\n - Make a php file or folder with a custom name. If you use a folder your main plugin file must be called index.php\r\n - In the config.php file add the name of your plugin to the plugin list array\r\n\r\n```php\r\n// plugins list\r\n$acptPlugins = array('sample');\r\n```\r\n\r\nThe name of your plugin is the folders name or the php files name.\r\n\r\nPlugins are loaded in this manner so you can decide how and when they are loaded. I'm sure I'll add more option in the future.\r\n\r\nTroubleshooting\r\n---\r\n\r\nIf your slugs are not working be sure you have flushed the permalink rules. To do this go to the permalinks and save the settings. No need to mod the .htaccess file if told.\r\n\r\nMaking a Custom Post Type\r\n---\r\n\r\nAdvanced Users See: post_type.php\r\n\r\nClass access function: acpt_post_type()\r\n\r\nMaking post types with ACPT is fast and easy. The post_type class takes up to 4 arguments (only the first two are required). First the singular name and then the plural name of your post type (makes these lowercase). The next is for capabilities. If you donâ€™t know how capabilities work set this to false and everything should work expected (the default, false, is the same as posts capabilities). Set capabilities to true to create custom capabilities using the post types name (see roles for advanced usage). Last, you have the settings argument. This is used if you want to change the default settings or override them. Use the settings argument the same as you would for creating post types using Wordpress building registration method.\r\n\r\nIcons\r\n---\r\n\r\nYou can also add icons using the 'icon' method as in the example. Use these following names as the parameters for the icon method. This will set your icon.\r\n\r\n- notebook\r\n- refresh\r\n- thumbs-up\r\n- box\r\n- bug\r\n- cake\r\n- calendar\r\n- card-biz\r\n- task\r\n- clock\r\n- color\r\n- compass\r\n- dine\r\n- ipad\r\n- ticket\r\n- shirt\r\n- plane\r\n- paint\r\n- mic\r\n- location\r\n- leaf\r\n- music\r\n- wine\r\n- dashboard\r\n- person\r\n- weather\r\n\r\nExample\r\n---\r\n\r\n```php\r\ninclude('acpt/init.php');\r\n\r\nadd_action('init', 'makethem');\r\nfunction makethem() {\r\n    $args = array(\r\n        'taxonomies' => array('category', 'post_tag'),\r\n        'supports' => array( 'title', 'editor', 'page-attributes'  ),\r\n        'hierarchical' => true,\r\n    );\r\n\r\n    $books = acpt_post_type('book','books', false,  $args );\r\n\r\n    // add icon to post type\r\n    $books->icon('notebook');\r\n\r\n}\r\n```\r\n\r\nMaking a Taxonomy\r\n---\r\n\r\nAdvanced Users See: tax.php\r\n\r\nClass access function: acpt_tax()\r\n\r\nMaking taxonomies with ACPT is fast and easy. The tax class takes up to 6 arguments (only the first 2 are required). First the singular name and then the plural name of your taxonomy (makes these lowercase). Third, you list have post types in an array (you can also set this in the post type itself, I recommend this way). Fourth, hierarchy. Set hierarchy to true if you want to allow the taxonomy to have descendants (the default, false). The last is for capabilities. If you donâ€™t know how capabilities work set this to false and everything should work expected (the default, false). Set capabilities to true to create custom capabilities using the taxonomies name (see roles for advanced usage). Last, you have the settings argument. This is used if you want to change the default settings or override them. Use the settings argument the same as you would for registering taxonomies using Wordpress building registration method.\r\n\r\n```php\r\ninclude('acpt/init.php');\r\n\r\nadd_action('init', 'makethem');\r\nfunction makethem() {\r\n    $colors = acpt_tax('color','colors', null, false );\r\n}\r\n```\r\n\r\nRoles\r\n---\r\n\r\nAdvanced Users See: role.php\r\n\r\nClass access function: acpt_cole()\r\n\r\nRoles are the most powerful part of ACPT. You can make(), update() and remove() with the role class. When working with roles in ACPT you need to understand how roles work in Wordpress to keep your site installation working smoothly. Unlike Taxonomies and Post Types, when roles are made they are added to the DB. This means you only need to run role code once for it to work. It is best to run this code on theme switching or plugin activation. You can get away with running the code once other ways but this is a common way to do so without a UI.\r\n\r\nFor basic usage be sure you know how switching themes and activating plugins work.\r\n\r\nThemes: http://www.krishnakantsharma.com/2011/01/activationdeactivation-hook-for-wordpress-theme/\r\nPlugins: http://codex.wordpress.org/Function_Reference/register_activation_hook\r\n\r\nWARNING: You should not work with roles unless you know what you are doing. Also, Be sure you consider a plan of attack for when your theme or plugin is removed or deactivated. Using roles is ment for advanced users only.\r\n\r\nMake Arguments\r\n---\r\n\r\nYou can set the first argument with capital letters. Formatted name is suggested.\r\n\r\n```php\r\n// Bad code, don't do this\r\ninclude('acpt/init.php');\r\nadd_action('init', 'makethem');\r\nfunction makethem() {\r\n    $r = acpt_role();\r\n    $r->make('Library Manager', array('read'), array('book', 'books'));\r\n    $r->update('Administrator', null, null, array('book','books'));\r\n}\r\n```\r\n\r\nMeta Boxes\r\n---\r\n\r\nAdvanced Users See: meta_box.php\r\n\r\nClass access function: `acpt_meta_box()`\r\n\r\nYou can now add Meta Boxes with ACPT. The meta_box class takes up to 3 arguments (only the first is required). First the name of the meta box. Second, the post types you want to use. Last any settings you want to override (priority for example). You can add custom meta boxes to you post types by adding the name of the meta box to the post types supports arg or by applying the post type within the make function. To add HTML/PHP to the meta box create a function beginning with \"meta_\" and append the name of the field to the end of it.\r\n\r\nIf you need more options please see the gitHub project https://github.com/jaredatch/Custom-Metaboxes-and-Fields-for-WordPress it has a lot of options to play with.\r\n\r\n```php\r\ninclude('acpt/init.php');\r\n\r\nadd_action('init', 'makeThem');\r\nfunction makeThem() {\r\n\r\n    $argsCourse = array(\r\n        'supports' => array( 'title', 'editor', 'page-attributes', 'details' ),\r\n        'hierarchical' => true,\r\n    );\r\n\r\n    $argsBook = array(\r\n        'supports' => array( 'title', 'editor', 'page-attributes' ),\r\n        'hierarchical' => true,\r\n    );\r\n\r\n    $courses = acpt_post_type('course','courses', false, $argsCourse );\r\n    $books = acpt_post_type('book','books', false, $argsBook );\r\n\r\n}\r\n\r\nadd_action( 'add_meta_boxes', 'addThem' );\r\n\r\nfunction addThem() {\r\n    acpt_meta_box('Details', array('book'));\r\n}\r\n\r\n// Note: forms API explained below\r\nfunction meta_details() {\r\n    $form = acpt_form('details');\r\n    $form->text('name');\r\n}\r\n```\r\n\r\nForms\r\n---\r\n\r\nAdvanced Users See: form.php\r\n\r\nClass access function: `acpt_form()`\r\n\r\nYou can now make Forms with ACPT. Please see the code for how to use this section. You will need to modify for best results. Plus I don't have time to document it right now. The meta box section has the code example you need.\r\n\r\nForms API also come with a dev mode, see config.php.\r\n\r\n```php\r\nfunction meta_details() {\r\n    // name, options\r\n\t$form = acpt_form('details', null);\r\n\r\n\t$form->text('name', array('label' => 'Text Field'));\r\n\t$form->color('color', array('label' => 'Color Field'));\r\n\r\n\t// With images and files a second hidden field is made\r\n\t// containing the the ID. As: {your_field_name}_id\r\n\t$form->image('image', array('label' => 'Image Field'));\r\n\t$form->file('file', array('label' => 'File Field'));\r\n\r\n\r\n\t$form->textarea('address',array('label' => 'Textarea'));\r\n\t$form->checkbox('checkbox', array('label' => 'Checkbox Example', 'desc' => 'Select this for value of 1'));\r\n\t$form->select('rooms', array('one', 'two', 'three'), array('label' => 'Select List'));\r\n\t$form->radio('baths', array('blue', 'green', 'red'), array('label' => 'Radio Buttons'));\r\n\r\n    // When outputting editor data you may want to apply \"the_content\" filter\r\n    // apply_filters('the_content', $content_var)\r\n    // note that $content_var must be set to the content by you manually\r\n\t$form->editor('baths', 'WYSIWYG Editor');\r\n\r\n    // Advanced Fields\r\n    $form->google_map('address', array('label' => 'Address Field'));\r\n    $form->date('date', array('label' => 'Date Field'));\r\n}\r\n```\r\n\r\nOutput\r\n---\r\nTo get data out of the forms API use the functions: `e_acpt_meta('[your_field_name]')` and `acpt_meta('[your_field_name]')`.\r\n\r\n`e_acpt_meta()` will echo the data. The function `acpt_meta()` will simply get the data.\r\n\r\nTo know what 'your_field_name' is turn on dev mode and view the fields. Or out put all of the post meta and it will be available from there. You can also you use `get_post_meta()` from WordPress if needed.\r\n\r\nNOTE: the names need to be wrapped in brackets [] inside of the string.\r\n\r\nForm fields are now a combination of the form name and the form field name. They no longer begin with acpt_.\r\n\r\nFor example the text field would be '[slide_title]'.\r\n\r\n```php\r\n// example of a meta box\r\nadd_action( 'add_meta_boxes', 'acpt_custom_meta' );\r\n\r\nfunction acpt_custom_meta() {\r\nacpt_meta_box('slide_options');\r\n}\r\n\r\n// form api example, input names are much shorter now\r\nfunction meta_slide_options() {\r\n$form = acpt_form('slide');\r\n$form->text('title'); // input attr name will be 'acpt[slide_title]'\r\n$form->text('desc'); // input attr name will be 'acpt[slide_desc]'\r\n}\r\n```\r\n\r\nSaving now includes a filter for data exclusive to ACPT fields. Filtering can be done as follows:\r\n\r\n```php\r\nadd_filter('acpt_save_filter', 'my_custom_function');\r\n\r\nfunction my_custom_function($acpt_data) {\r\n// your code here: validation and sanitization for example\r\n// you access the data as follows\r\n// $acpt_data[{formName_fieldName}]\r\n\r\n$acpt_data['slide_title'] = esc_html($acpt_data['slide_title']);\r\n\r\nreturn $acpt_data;\r\n}\r\n```\r\n\r\nGrouping\r\n---\r\nSince version 3.0.2 you can group form fields in the DB. This is good for making more dynamic forms and help prevent strange prefixes and bad naming.\r\n\r\nTo group form fields, in the `$opt` array set the key 'group' and the value as a string with `[]` around the name. For example:\r\n\r\n```php\r\n// form api example, input names are much shorter now\r\nfunction meta_slide_options() {\r\n$form = acpt_form('slide');\r\n$form->text('title', array('group' => '[slide]') ); // input attr name will be 'acpt[slide][slide_title]'\r\n$form->text('desc', array('group' => '[slide]') ); // input attr name will be 'acpt[slide][slide_desc]'\r\n}\r\n```\r\n\r\nYou can also stack groups:\r\n\r\n```php\r\n// form api example, input names are much shorter now\r\nfunction meta_slide_options() {\r\n$form = acpt_form('slide');\r\n$form->text('title', array('group' => '[slide][text]') ); // input attr name will be 'acpt[slide][text][slide_title]'\r\n$form->text('desc', array('group' => '[slide][text]') ); // input attr name will be 'acpt[slide][text][slide_desc]'\r\n}\r\n```\r\n\r\nYou can also apply the group to the form itself to save typing:\r\n\r\n```php\r\n// form api example, input names are much shorter now\r\nfunction meta_slide_options() {\r\n$form = acpt_form('slide', array('group' => '[slide][text]'));\r\n$form->text('title'); // input attr name will be 'acpt[slide][text][slide_title]'\r\n$form->text('desc'); // input attr name will be 'acpt[slide][text][slide_desc]'\r\n}\r\n```\r\n\r\n*NOTE*: There is also a feature to add a *sub group* after the field name. The *same rules apply* but the group is added to the end. Simply replace the key `group` with `sub`. However, sub groups are only available to fields; *not the form object* itself.\r\n\r\n\r\nTogether: Post Type, Meta Box, Form (grouping) and Taxonomy\r\n---\r\n\r\n```php\r\ninclude('acpt/init.php');\r\n\r\nadd_action('init', 'makeThem');\r\nfunction makeThem() {\r\n\r\n    $args = array(\r\n        'supports' => array( 'title', 'editor', 'page-attributes'  ),\r\n        'hierarchical' => true,\r\n    );\r\n\r\n    $books = acpt_post_type('book','books', false,  $args );\r\n    $courses = acpt_post_type('course','courses', false,  $args );\r\n\r\n    $books->icon('notebook');\r\n\r\n    acpt_tax('color', 'colors', 'book', true);\r\n    acpt_tax('author', 'authors', array($books, $courses), true );\r\n\r\n}\r\n\r\nadd_action( 'add_meta_boxes', 'addThem' );\r\n\r\nfunction addThem() {\r\n    acpt_meta_box('Details', array('book', 'course'));\r\n}\r\n\r\nfunction meta_details() {\r\n    $personal = acpt_form('info', array('group' => '[personal]'));\r\n    $personal->text('name');\r\n    $personal->textarea('address');\r\n\r\n    $business = acpt_form('info', array('group' => '[business]'));\r\n    $business->text('name');\r\n    $business->textarea('address');\r\n}\r\n```\r\n\r\nActions\r\n---\r\n\r\n- start_acpt_meta\r\n- end_acpt_meta\r\n- start_acpt_save\r\n- end_acpt_save\r\n\r\nFilters\r\n---\r\n\r\n- {your_field_name}_filter : This for the admin screens. It filters the output of custom fields.\r\n- acpt_save_filter: Meta data being saved. Best used to validate and sanitize custom data.\r\n- acpt_plugin_folder: Set the plugins folder. Should be file system level include path not relative to project.\r\n\r\n\r\nChange Log\r\n---\r\n\r\n- v3.1.0 - checkbox form field added\r\n- v3.0.3 - code cleanup and adding new getter class\r\n- v3.0.2 - code cleanup and grouping added\r\n- v3.0 - tagging now being used for versions","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}